'use strict';
const crypto = require('crypto');
const pug = require('pug');
const Cookies = require('cookies');
const util = require('./handler-util');
const Post = require('./post');
const moment = require('moment-timezone'); // タイムスタンプの表記を見やすくするためにmomentモジュールを読み込む

const trackingIdKey = 'tracking_id';
const secretKey =
  '5a69bb55532235125986a0df24aca759f69bae045c7a66d6e2bc4652e3efb43da4' +
  'd1256ca5ac705b9cf0eb2c6abb4adb78cba82f20596985c5216647ec218e84905a' +
  '9f668a6d3090653b3be84d46a7a4578194764d8306541c0411cb23fbdbd611b5e0' +
  'cd8fca86980a91d68dc05a3ac5fb52f16b33a6f3260c5a5eb88ffaee07774fe2c0' +
  '825c42fbba7c909e937a9f947d90ded280bb18f5b43659d6fa0521dbc72ecc9b4b' +
  'a7d958360c810dbd94bbfcfd80d0966e90906df302a870cdbffe655145cc4155a2' +
  '0d0d019b67899a912e0892630c0386829aa2c1f1237bf4f63d73711117410c2fc5' +
  '0c1472e87ecd6844d0805cd97c0ea8bbfbda507293beebc5d9';

function handle(req, res) {
  const cookies = new Cookies(req, res);
  const trackingId = addTrackingCookies(cookies, req.user); // トラッキングIDの検証結果によってはCookieから取得したIDを破棄し、新規IDを付与する

  switch (req.method) {
    case 'GET':
      res.writeHead(200, {
        'Content-Type': 'text/html; charset=utf-8'
      });
      Post.findAll({order:[['id', 'DESC']]}).then((posts) => {
        posts.forEach(post => {
          post.content = post.content.replace(/\+/g, ' ');
          post.formattedCreatedAt = moment(post.createdAt)
            .tz('Asia/Tokyo')
            .format('YYYY年MM月DD日 HH時mm分ss秒');
        })
        res.end(pug.renderFile('./views/posts.pug', {
          posts: posts,
          user: req.user
        }));
        console.info(
            `閲覧されました: user: ${req.user}, ` +
            `trackingId: ${trackingId},` +
            `remoteAddress: ${req.connection.remoteAddress} ` +
            `user-agent: ${req.headers['user-agent']} `
        );
      });
      break;
    case 'POST':
      let body = [];
      req.on('data', (chunk) => {
        body.push(chunk);
      }).on('end', () => {
        body = Buffer.concat(body).toString();
        const decoded = decodeURIComponent(body);
        const content = decoded.split('content=')[1];
        console.info('投稿されました: ' + content);
        Post.create({
          content: content,
          trackingCookie: trackingId,
          postedBy: req.user
        }).then(() => {
          handleRedirectPosts(req, res);
        });
      });
      break;
    default:
      util.handleBadRequest(req, res);
      break;
  }
}

function handleDelete(req, res) {
  const cookies = new Cookies(req, res);
  switch (req.method) {
    // POSTメソッドのときだけ以降の処理が呼ばれるようにする
    case 'POST':
      // POSTのデータを受け取り、URIエンコードをデコードして投稿のIDを取得する
      let body = [];
      req.on('data', (chunk) => {
        body.push(chunk);
      }).on('end', () => {
        body = Buffer.concat(body).toString();
        const decoded = decodeURIComponent(body);
        const id = decoded.split('id=')[1];
        // sequelizeにおける削除の実装
        // idを使って投稿を取得し、取得できた場合は.then以降の無名関数が呼ばれる
        Post.findByPk(id).then((post) => {
          // 削除処理を実行する前に「現在のユーザが投稿のpostedByと一致する」もしくは「管理人である」かどうか確認する
          if (req.user === post.postedBy || req.user === 'admin') {
            post.destroy().then(() => {
              handleRedirectPosts(req, res);
            });
          }
        });
        console.info(
          `削除されました: user: ${req.user}, `+
          `trackingId: ${cookies.get(trackingIdKey)},` +
          `remoteAddress: ${req.connection.remoteAddress}, `+
          `userAgent: ${req.headers['user-agent']} `
        );
      });
      break;
    default:
      util.handleBadRequest(req, res);
      break;
    }
}

function handleRedirectPosts(req, res) {
  res.writeHead(303, {
    'Location': '/posts'
  });
  res.end();
}

/**
 * Cookieに含まれているトラッキングIDに異常がなければその値を返し、
 * 存在しない場合や異常なものである場合には、再度生成してCookieに付与し、その値を返す
 * @param {Cookies} cookies
 * @param {String} userName
 * @return {String} トラッキングID
 */
function addTrackingCookies(cookies, userName) {
  const requestedTrackingId = cookies.get(trackingIdKey);
  if (isValidTrackingId(requestedTrackingId, userName)) {
    return requestedTrackingId;
  } else {
    const originalId = parseInt(crypto.randomBytes(8).toString('hex'), 16);
    const tomorrow = new Date(Date.now() + (1000 * 60 * 60 * 24));
    const trackingId = originalId + '_' + createValidHash(originalId, userName);
    cookies.set(trackingIdKey, trackingId, { expires: tomorrow });
    return trackingId;
  }
}


function isValidTrackingId(trackingId, userName) {
  if(!trackingId) {
    return false;
  }
  const splitted = trackingId.split('_');
  const originalId = splitted[0];
  const requestedHash = splitted[1];
  return createValidHash(originalId, userName) === requestedHash;
}

function createValidHash(originalId, userName) {
  const sha1sum = crypto.createHash('sha1');
  sha1sum.update(originalId + userName + secretKey);
  return sha1sum.digest('hex');
}

module.exports = {
  handle,
  handleDelete
};
