'use strict';
const pug = require('pug');
const Cookies = require('cookies');
const util = require('./handler-util');
const Post = require('./post');

// タイムスタンプの表記を見やすくするためにmomentモジュールを読み込む
const moment = require('moment-timezone');

const trackingIdKey = 'tracking_id';
function handle(req, res) {
  const cookies = new Cookies(req, res);
  addTrackingCookies(cookies);

  switch (req.method) {
    case 'GET':
      res.writeHead(200, {
        'Content-Type': 'text/html; charset=utf-8'
      });
      Post.findAll({order:[['id', 'DESC']]}).then((posts) => {
        posts.forEach(post => {
          post.content = post.content.replace(/\n/g, '<br>');
          post.formattedCreatedAt = moment(post.createdAt)
            .tz('Asia/Tokyo')
            .format('YYYY年MM月DD日 HH時mm分ss秒');
        })
        res.end(pug.renderFile('./views/posts.pug', {
          posts: posts,
          user: req.user
        }));
        console.info(
            `閲覧されました: user: ${req.user}, ` +
            `trackingId: ${cookies.get(trackingIdKey) },` +
            `remoteAddress: ${req.connection.remoteAddress} ` +
            `user-agent: ${req.headers['user-agent']} `
        );
      });
      break;
    case 'POST':
      let body = [];
      req.on('data', (chunk) => {
        body.push(chunk);
      }).on('end', () => {
        body = Buffer.concat(body).toString();
        const decoded = decodeURIComponent(body);
        const content = decoded.split('content=')[1];
        console.info('投稿されました: ' + content);
        Post.create({
          content: content,
          trackingCookie: cookies.get(trackingIdKey),
          postedBy: req.user
        }).then(() => {
          handleRedirectPosts(req, res);
        });
      });
      break;
    default:
      util.handleBadRequest(req, res);
      break;
  }
}

function handleDelete(req, res) {
  const cookies = new Cookies(req, res);
  switch (req.method) {
    // POSTメソッドのときだけ以降の処理が呼ばれるようにする
    case 'POST':
      // POSTのデータを受け取り、URIエンコードをデコードして投稿のIDを取得する
      let body = [];
      req.on('data', (chunk) => {
        body.push(chunk);
      }).on('end', () => {
        body = Buffer.concat(body).toString();
        const decoded = decodeURIComponent(body);
        const id = decoded.split('id=')[1];
        // sequelizeにおける削除の実装
        // idを使って投稿を取得し、取得できた場合は.then以降の無名関数が呼ばれる
        Post.findByPk(id).then((post) => {
          // 削除処理を実行する前に「現在のユーザが投稿のpostedByと一致する」もしくは「管理人である」かどうか確認する
          if (req.user === post.postedBy || req.user === 'admin') {
            post.destroy().then(() => {
              handleRedirectPosts(req, res);
            });
          }
        });
        console.info(
          `削除されました: user: ${req.user}, `+
          `trackingId: ${cookies.get(trackingIdKey)},` +
          `remoteAddress: ${req.connection.remoteAddress}, `+
          `userAgent: ${req.headers['user-agent']} `
        );
      });
      break;
    default:
      util.handleBadRequest(req, res);
      break;
    }
}

function handleRedirectPosts(req, res) {
  res.writeHead(303, {
    'Location': '/posts'
  });
  res.end();
}

function addTrackingCookies(cookies) {
  if (!cookies.get(trackingIdKey)) {
    const trackingId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
    const tomorrow = new Date(Date.now() + (1000 * 60 * 60 * 24));
    cookies.set(trackingIdKey, trackingId, { expires: tomorrow });
  }
}

module.exports = {
  handle,
  handleDelete
};
